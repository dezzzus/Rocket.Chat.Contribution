eyJhbGciOiJIUzI1NiJ9.cGlwZWxpbmU6CiAgcmVzdG9yZS1jYWNoZToKICAgIGltYWdlOiBkcmlsbHN0ZXIvZHJvbmUtdm9sdW1lLWNhY2hlCiAgICByZXN0b3JlOiB0cnVlCiAgICBtb3VudDoKICAgICAgLSAvZHJvbmUvbWV0ZW9yX2luc3RhbGwvCiAgICAgIC0gLi9ub2RlX21vZHVsZXMKICAgICAgLSAuLy5tZXRlb3IvbG9jYWwKICAgIHZvbHVtZXM6CiAgICAgIC0gL3RtcC9jYWNoZS9Sb2NrZXQuQ2hhdDovY2FjaGUKICBidWlsZDoKICAgIGltYWdlOiB1YnVudHU6MTYuMDQKICAgIGVudmlyb25tZW50OgogICAgICAtIE1FVEVPUl9BTExPV19TVVBFUlVTRVI9dHJ1ZQogICAgICAtIEhPTUU9L2Ryb25lCiAgICBjb21tYW5kczoKICAgICAgLSBhcHQgdXBkYXRlICYmIGFwdCBpbnN0YWxsIGN1cmwgZ2l0IGJ6aXAyIC15CiAgICAgIC0gaWYgWyAhIC1lICIvZHJvbmUvbWV0ZW9yX2luc3RhbGwvbWV0ZW9yIiBdOyB0aGVuIGN1cmwgaHR0cHM6Ly9pbnN0YWxsLm1ldGVvci5jb20gfCBzZWQgcy8tLXByb2dyZXNzLWJhci8tc0wvZyB8IC9iaW4vc2g7IGVsc2UgbXYgL2Ryb25lL21ldGVvcl9pbnN0YWxsICRIT01FLy5tZXRlb3I7IGNwICRIT01FLy5tZXRlb3IvJChkaXJuYW1lICQocmVhZGxpbmsgIiRIT01FLy5tZXRlb3IvbWV0ZW9yIikpL3NjcmlwdHMvYWRtaW4vbGF1bmNoLW1ldGVvciAvdXNyL2xvY2FsL2Jpbi87IGZpCiAgICAgIC0gbWV0ZW9yIG5wbSBpbnN0YWxsCiAgICAgIC0gc2V0ICtlCiAgICAgIC0gbWV0ZW9yIGFkZCByb2NrZXRjaGF0OmxpYgogICAgICAtIHNldCAtZQogICAgICAtIG1rZGlyIC9kcm9uZS9idWlsZAogICAgICAtIG1ldGVvciBidWlsZCAtLWFsbG93LXN1cGVydXNlciAtLXNlcnZlci1vbmx5IC0tZGlyZWN0b3J5IC9kcm9uZS9idWlsZAogICAgICAtIGNwIC5kb2NrZXIvRG9ja2VyZmlsZS5sb2NhbCAvZHJvbmUvYnVpbGQvRG9ja2VyZmlsZQogICAgICAtIG12ICRIT01FLy5tZXRlb3IgL2Ryb25lL21ldGVvcl9pbnN0YWxsCiAgcmVidWlsZC1jYWNoZToKICAgIGltYWdlOiBkcmlsbHN0ZXIvZHJvbmUtdm9sdW1lLWNhY2hlCiAgICByZWJ1aWxkOiB0cnVlCiAgICBtb3VudDoKICAgICAgLSAvZHJvbmUvbWV0ZW9yX2luc3RhbGwvCiAgICAgIC0gLi9ub2RlX21vZHVsZXMKICAgICAgLSAuLy5tZXRlb3IvbG9jYWwKICAgIHZvbHVtZXM6CiAgICAgIC0gL3RtcC9jYWNoZS9Sb2NrZXQuQ2hhdDovY2FjaGUKICBkb2NrZXI6CiAgICBpbWFnZTogcGx1Z2lucy9kb2NrZXIKICAgIHJlcG86IHJvY2tldGNoYXQvcm9ja2V0LmNoYXQKICAgIGRvY2tlcmZpbGU6IC9kcm9uZS9idWlsZC9Eb2NrZXJmaWxlCiAgICBzdG9yYWdlX2RyaXZlcjogb3ZlcmxheQogICAgY29udGV4dDogL2Ryb25lL2J1aWxkCiAgICBzZWNyZXRzOiBbIGRvY2tlcl91c2VybmFtZSwgZG9ja2VyX3Bhc3N3b3JkIF0KICAgIHRhZzogZGVzaWducHJldmlldwo.jXIixhmu9ReQHZtWXzl9WsSqGLSBMhPhC4pkyC7IypM